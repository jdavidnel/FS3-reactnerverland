type Player {
  _id: ID
  score: Int
  login: String
  mail: String
  mdp: String
}

type Round {
  _id: ID
  f_meme: Meme
  nd_meme: Meme
  vote: [Vote]
	winner: Player
}

type Clash {
  _id: ID
  f_competitors: Player
  nd_competitors: Player
	suscribers: [Player]
	round: [Round]
	winner: Player
}

type Vote {
  _id: ID
  user: Player
  for: Meme
}

type Meme {
  _id: ID
  image: String
  player: Player
}

type Query {
  players(_id: ID, score: Int, login: String, mail: String): [Player]
  clashs(_id: ID, f_competitors: ID, nd_competitors: ID, suscribers: [ID], winner: ID): [Clash]
  votes(_id: ID, user: ID, for: ID): [Vote]
  memes(_id: ID, player: ID): [Meme]
  rounds(_id: ID, f_meme: ID, nd_meme: ID, winner: ID, vote: ID): [Round]
}

type Mutation {
  addPlayer(score: Int, login: String!, mail: String!, mdp: String!): Player
  updatePlayer(_id: ID!, score: Int, mail: String, mdp: String): Player
  deletePlayer(_id: ID!): Player

  addClash(f_competitors: ID!, nd_competitors: ID!, suscribers: [ID], winner: ID): Clash
  updateClash(_id: ID!, suscribers: ID, winner: ID): Clash
  deleteClash(_id: ID!): Clash

  addVote(user: ID!, for: ID!): Vote
  updateVote(_id: ID! ,user: ID, for: ID): Vote
  deleteVote(_id: ID!): Vote
  
  addMeme(image: String!, player: ID!): Meme
  updateMeme(_id: ID! , image: String, player: ID): Meme
  deleteMeme(_id: ID!): Meme

  addRound(meme: [ID], f_meme: ID, nd_meme: ID, winner: ID, vote: [ID]): Round
  updateRound(_id: ID!, f_meme: ID, nd_meme: ID, winner: ID, vote: [ID]): Round
  deleteRound(_id: ID!): Round
}